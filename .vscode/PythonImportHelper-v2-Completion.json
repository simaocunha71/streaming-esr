[
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "routing",
        "description": "routing",
        "isExtraImport": true,
        "detail": "routing",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 2,
        "importPath": "src.oNode",
        "description": "src.oNode",
        "peekOfCode": "def server():\n   # Create a datagram socket\n   bufferSize = 1024\n   UDPServerSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n   UDPServerSocket.bind(('',0))\n   print(UDPServerSocket.getsockname()[1])\n   while(True):\n       bytesAddressPair = UDPServerSocket.recvfrom(bufferSize)\n       message = bytesAddressPair[0]\n       address = bytesAddressPair[1]",
        "detail": "src.oNode",
        "documentation": {}
    },
    {
        "label": "OYP",
        "kind": 6,
        "importPath": "src.overlayPackets",
        "description": "src.overlayPackets",
        "peekOfCode": "class OYP:\n    def __init__(self,type,port):\n        self.type = type\n        self.port = port",
        "detail": "src.overlayPackets",
        "documentation": {}
    },
    {
        "label": "Entry",
        "kind": 6,
        "importPath": "src.routing",
        "description": "src.routing",
        "peekOfCode": "class Entry:\n    def __init__(self,ip,port):\n        self.ip = ip\n        self.port = port\n# Routing table of the tracker node\nclass RoutingTable:\n    @classmethod\n    def __init__(self):\n        self.groups = [[]]\n    @classmethod",
        "detail": "src.routing",
        "documentation": {}
    },
    {
        "label": "RoutingTable",
        "kind": 6,
        "importPath": "src.routing",
        "description": "src.routing",
        "peekOfCode": "class RoutingTable:\n    @classmethod\n    def __init__(self):\n        self.groups = [[]]\n    @classmethod\n    def add_group(self,groupList):\n        self.groups += [groupList]\n    @classmethod\n    def load(self,configFile):\n        f = open(configFile, \"r\")",
        "detail": "src.routing",
        "documentation": {}
    }
]